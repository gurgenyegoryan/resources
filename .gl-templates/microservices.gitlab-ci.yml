stages:
  - test
  - build
  - push
  - deploy

.test-go: #unique to frontend, productcatalog and shippingservice
  stage: test
  image:
    name: golang:1.15-alpine
  when: manual #testing
  before_script:
    - apk add --no-cache ca-certificates git
    - apk add build-base
  script:
    - go test #test .go-s in root folder

.test-c#: #unique to cartservice
  stage: test
  image: 
    name: mcr.microsoft.com/dotnet/sdk:5.0.402
  when: manual #testing
  script:
    - dotnet test .


build:
  stage: build
  image: 
    name: $CI_REGISTRY/telecomproject/cluster/docker:latest
  services:
    - docker:19-dind
  when: manual #testing
  before_script:
    - aws ecr create-repository --repository-name $CI_PROJECT_NAME --region $AWS_DEFAULT_REGION >> /dev/null || true #try to create repo
    - export ECR_REGISTRY=`aws ecr describe-repositories --repository-names $CI_PROJECT_NAME --query repositories[].repositoryUri --output text` #get AWS repo uri
    - aws ecr get-login-password | docker login -u AWS --password-stdin $ECR_REGISTRY #docker login AWS repo
  script:
    - docker build -t $ECR_REGISTRY:latest -t $ECR_REGISTRY:$CI_COMMIT_SHORT_SHA . #build AWS:latest and commit
    - docker push --all-tags $ECR_REGISTRY #push AWS:latest and commit
    - docker save -o $CI_PROJECT_NAME.tar $ECR_REGISTRY:$CI_COMMIT_SHORT_SHA
  # after_script:
  #   - docker save -o $CI_PROJECT_NAME.tar $ECR_REGISTRY:$CI_COMMIT_SHORT_SHA #save the image
  artifacts:
    paths:
      - $CI_PROJECT_NAME.tar
    expire_in: 1 hrs

push:
  stage: push
  image: 
    name: $CI_REGISTRY/telecomproject/cluster/docker:latest
  services:
    - docker:19-dind
  needs:
    - job: build
      artifacts: true
  when: manual #testing
  before_script:
    - export ECR_REGISTRY=`aws ecr describe-repositories --repository-names $CI_PROJECT_NAME --query repositories[].repositoryUri --output text` #get AWS repo uri
    - aws ecr get-login-password | docker login -u AWS --password-stdin $ECR_REGISTRY #docker login AWS repo
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY #docker login GL registry
    - docker load -i $CI_PROJECT_NAME.tar #laod the image from build
  script:
    - docker image tag $ECR_REGISTRY:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:latest #tag gitlab:latest
    - docker image tag $ECR_REGISTRY:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA #tag gitlab:version
    - docker push --all-tags $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME #push gitlab:latest and commit

deploy:
  stage: deploy
  image:
    name: $CI_REGISTRY/telecomproject/cluster/deptools:latest
  needs:
    - build
  when: manual #testing
  before_script:
    - aws eks update-kubeconfig --name $PROJECT_NAME --region $AWS_REGION #update kubeconfig
  script:
    - kubectl apply -f $CI_PROJECT_NAME-deployment.yaml
    - kubectl rollout restart deployment/$CI_PROJECT_NAME -n $NAMESPACE
    - kubectl get ingress -n $NAMESPACE | awk 'NR==2 {print $4}'

# rollback:
#   stage: deploy
#   image:
#     name: $CI_REGISTRY/telecomproject/cluster/deptools:latest
#     before_script:
#       - pip3 install jq yq
#     script:
#       - yq -r '.spec.template.spec.containers[]? | (select(.name=="$CI_PROJECT_NAME-container") |.image |= sub("latest"; "$CI_COMMIT_SHORT_SHA"))' *-manifest.yaml